using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using UnityEngine;

public class BatchWickGenerator : WickGenerator
{
    [SerializeField]
    [Range(0, 30)]
    protected int quantityToGenerate = 8;
    public int QuantityToGenerate { get => quantityToGenerate; set => quantityToGenerate = value; }

    public bool IsTerremoto { get; set; }

    public float GenerationDelay { get; set; }

    private void OnEnable()
    {
        if (quantityToGenerate == 0)
            enabled = false;
        else
            SetBatchGeneration();
    }

    public virtual void SetBatchGeneration()
    {
        Transform previousWick = IsTerremoto
            ? wicksBatch.transform
            : GetLatestGeneratedWick();

        GenerateBatch();

        enabled = false;

        Transform GetLatestGeneratedWick()
        {
            var generators = transform.parent.GetComponent<FireWorksManager>().WickGenerators.OfType<BoundedContinuousWickPooling>();

            var generatorWithLatestWick = generators.OrderByDescending(gen => gen.PreviousWick.position.y).First();

            return generatorWithLatestWick.PreviousWick;
        }
        async void GenerateBatch()
        {
            await Task.Delay(TimeSpan.FromSeconds(GenerationDelay));

            for (int i = 0; i < quantityToGenerate; i++)
            {
                Vector2 desiredPosition = new Vector2(wicksBatch.transform.position.x, previousWick.transform.position.y);
                previousWick = GenerateWick(desiredPosition).transform;
                ConfigurateWick();
            }

            void ConfigurateWick()
            {
                Wick wickScript = previousWick.GetComponent<Wick>();
                wickScript.Flyweight = wicksBatch.GetComponent<WicksFlyweight>();
                wickScript.enabled = true;
            }
        }
    }

    public void DestroyWicksWithNameDefaultName()
    {
        List<Wick> wicks = GetComponentsInChildren<Wick>().ToList();

        wicks.Where(wick => wick.name == autogeneratedName).ToList().ForEach(wick => DestroyImmediate(wick.gameObject));
    }
}
