using UnityEngine;

public abstract class WickGenerator : MonoBehaviour
{
    [Header("References")]
    [SerializeField]
    protected GameObject wicksBatch;
    [SerializeField]
    protected GameObject wickType;
    public GameObject WickType { get => wickType; set => wickType = value; }

    [Header("Configuration")]
    [SerializeField]
    [Tooltip("Name to identify autogenerated wicks. If a wick name matches this, it will be destroyed.")]
    [ContextMenuItem("Reset Name", "ResetName")]
    protected string autogeneratedName = "Autogenerated Wick";
    public string AutogeneratedName { get => autogeneratedName; }

    [SerializeField]
    [Range(0.01f, 15f)]
    protected float maxDistanceBetweenWicks = 8;
    public float MaxDistanceBetweenWicks
    {
        get => maxDistanceBetweenWicks;
        set => maxDistanceBetweenWicks = value;
    }

    protected virtual Transform GenerateWick(Vector2 previousWickPosition)
    {
        Vector2 position = previousWickPosition + Vector2.up * CalculateSpacingBetweenWicks();

        GameObject newWick = Instantiate(wickType, position, Quaternion.identity, wicksBatch.transform);
        newWick.name = autogeneratedName;

        NotifyGenerationToScore(newWick);

        return newWick.transform;
    }

    protected void NotifyGenerationToScore(GameObject wick)
    {
        if (wick.GetComponent<Wick>() is Trueno)
            Score.Instance.TotalTruenos++;
        else if (!(wick.GetComponent<Wick>() is TutorialWick))
            Score.Instance.TotalHits++;
    }

    protected float CalculateSpacingBetweenWicks()
    {
        float minDistanceInBetween = wickType.GetComponent<CircleCollider2D>().radius + 1f;

        if (maxDistanceBetweenWicks > minDistanceInBetween)
            return Random.Range(minDistanceInBetween, maxDistanceBetweenWicks);

        return minDistanceInBetween;
    }

    protected void ResetName() => autogeneratedName = "Autogenerated Wick";
}
